{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["app","props","_useState","useState","_useState2","Object","slicedToArray","msg","setMsg","_useState3","_useState4","hoveredArea","setHoveredArea","_useState5","_useState6","moveMsg","setMoveMsg","_useState7","_useState8","reset","setReset","_useState9","_useState10","adminMode","setAdminMode","_useForm","useForm","register","handleSubmit","basePolygonArea","name","shape","coords","preFillColor","fillColor","hoverDescription","clickedDescription","_useState11","areas","_useState12","adminLayout","setAdminLayout","_useState13","_useState14","userLayout","setUserLayout","useEffect","console","log","URL","moveOnImage","evt","x","nativeEvent","layerX","y","layerY","concat","JSON","stringify","resetHandler","resetArea","adminLayoutCopy","objectSpread","area","react_default","a","createElement","className","type","onClick","ImageMapper_default","src","map","width","onImageClick","areasCopy","toConsumableArray","push","lineWidth","makeDot","_","makeDot2","onImageMouseMove","onSubmit","data","userLayoutCopy","ref","style","position","clickedOutside","onLoad","length","onMouseMove","moveOnArea","clicked","onMouseEnter","enterArea","onMouseLeave","leaveArea","strokeColor","top","center","left","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","src_App","document","getElementById","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.c6daac9f.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport \"./App.css\";\r\nimport ImageMapper from \"react-image-mapper\";\r\n\r\nconst app = (props) => {\r\n  const [msg, setMsg] = useState(null);\r\n  const [hoveredArea, setHoveredArea] = useState(null);\r\n  const [moveMsg, setMoveMsg] = useState(null);\r\n\r\n  const [reset, setReset] = useState(true);\r\n  const [adminMode, setAdminMode] = useState(false);\r\n\r\n  const { register, handleSubmit } = useForm();\r\n\r\n  const imageName = \"Modern art exbition\";\r\n\r\n  const basePolygonArea = [\r\n    {\r\n      name: \"\",\r\n      shape: \"poly\",\r\n      coords: [],\r\n      preFillColor: \"rgba(0, 0, 255, 0.15)\",\r\n      fillColor: \"rgba(0, 0, 255, 0.2)\",\r\n      hoverDescription: \"\",\r\n      clickedDescription: \"\"\r\n    }\r\n  ];\r\n\r\n  const [adminLayout, setAdminLayout] = useState({\r\n    name: \"adminLayout\",\r\n    areas: basePolygonArea\r\n  });\r\n\r\n  const [userLayout, setUserLayout] = useState({\r\n    name: \"userLayout\",\r\n    areas: []\r\n  });\r\n\r\n  useEffect(() => {\r\n    console.log(userLayout);\r\n    console.log(adminLayout);\r\n  }, [reset]);\r\n\r\n  var URL = \"https://c1.staticflickr.com/5/4052/4503898393_303cfbc9fd_b.jpg\";\r\n\r\n  const load = () => {\r\n    if (adminLayout.areas[0].coords.length === 0) {\r\n      setMsg(\"Use Admin Mode to add some areas !\");\r\n    } else {\r\n      setMsg(\"Let's interact with image !\");\r\n    }\r\n  };\r\n\r\n  const clicked = (area) => {\r\n    setMsg(\r\n      `Clicked area: ${area.name} -> ${area.hoverDescription}. ${area.clickedDescription}`\r\n    );\r\n  };\r\n\r\n  const clickedOutside = (evt) => {\r\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n    setMsg(\r\n      `You clicked on the ${imageName} image at coords ${JSON.stringify(\r\n        coords\r\n      )}`\r\n    );\r\n  };\r\n\r\n  const moveOnImage = (evt) => {\r\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n    setMoveMsg(`You moved on the image at coords ${JSON.stringify(coords)}`);\r\n    // console.log(adminLayout);\r\n    // console.log(userLayout);\r\n    // console.log(adminLayout.areas[0]);\r\n  };\r\n\r\n  const enterArea = (area) => {\r\n    setHoveredArea(area);\r\n    setMsg(`Entered: ${area.hoverDescription}`);\r\n  };\r\n\r\n  const leaveArea = (area) => {\r\n    setHoveredArea(null);\r\n    setMsg(`Leaved: ${area.name}`);\r\n  };\r\n\r\n  const moveOnArea = (area, evt) => {\r\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n    setMoveMsg(\r\n      \"You moved on \" +\r\n        area.shape +\r\n        \" \" +\r\n        area.name +\r\n        ' at coords {\"x\":' +\r\n        coords.x +\r\n        ',\"y\":' +\r\n        coords.y +\r\n        \"}\"\r\n    );\r\n  };\r\n\r\n  const getTipPosition = (area) => {\r\n    return { top: `${area.center[1]}px`, left: `${area.center[0]}px` };\r\n  };\r\n\r\n  const makeDot = (evt) => {\r\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n    const areasCopy = [...adminLayout.areas];\r\n    areasCopy.push({\r\n      name: \"1\",\r\n      shape: \"circle\",\r\n      coords: [coords.x, coords.y, 1],\r\n      preFillColor: \"yellow\",\r\n      lineWidth: 6\r\n    });\r\n\r\n    areasCopy[0].coords.push(coords.x);\r\n    areasCopy[0].coords.push(coords.y);\r\n\r\n    const adminLayoutCopy = { ...adminLayout, areas: areasCopy };\r\n    setAdminLayout(adminLayoutCopy);\r\n  };\r\n\r\n  const makeDot2 = (area, evt) => {\r\n    const coords = { x: evt.nativeEvent.layerX, y: evt.nativeEvent.layerY };\r\n    const areasCopy = [...adminLayout.areas];\r\n    areasCopy.push({\r\n      name: \"1\",\r\n      shape: \"circle\",\r\n      coords: [coords.x, coords.y, 1],\r\n      preFillColor: \"yellow\",\r\n      lineWidth: 6\r\n    });\r\n\r\n    console.log(coords);\r\n\r\n    areasCopy[0].coords.push(coords.x);\r\n    areasCopy[0].coords.push(coords.y);\r\n\r\n    const adminLayoutCopy = { ...adminLayout, areas: areasCopy };\r\n    setAdminLayout(adminLayoutCopy);\r\n\r\n    //drawPolygon(coords.x, coords.y);\r\n  };\r\n\r\n  const drawPolygon = (x, y) => {\r\n    const areasCopy = [...adminLayout.areas];\r\n    areasCopy[0].coords.push(x);\r\n    areasCopy[0].coords.push(y);\r\n\r\n    const adminLayoutCopy = { ...adminLayout, areas: areasCopy };\r\n    setAdminLayout(adminLayoutCopy);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   const areasCopy = [...userLayout.areas];\r\n  //   areasCopy[0].coords.push(50);\r\n  //   const userLayoutCopy = { ...userLayout, areas: areasCopy };\r\n\r\n  //   setUserLayoutCoords(userLayoutCopy);\r\n  // }, [userLayoutCoords]);\r\n\r\n  const resetHandler = () => {\r\n    const resetArea = basePolygonArea;\r\n\r\n    // name: \"P1\",\r\n    // shape: \"poly\",\r\n    // coords: [],\r\n    // preFillColor: \"rgba(0, 0, 255, 0.15)\",\r\n    // fillColor: \"rgba(0, 0, 255, 0.2)\"\r\n\r\n    const adminLayoutCopy = { ...adminLayout, areas: resetArea };\r\n    setAdminLayout(adminLayoutCopy);\r\n    setReset(!reset);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setReset(true);\r\n  }, [reset]);\r\n\r\n  const addPolygonHandler = (data) => {\r\n    const areasCopy = [...userLayout.areas];\r\n\r\n    areasCopy.push(adminLayout.areas[0]);\r\n\r\n    //console.log(data.name)\r\n    //console.log(areasCopy[0].name)\r\n    adminLayout.areas[0].name = data.name;\r\n    adminLayout.areas[0].hoverDescription = data.hoverDescription;\r\n    adminLayout.areas[0].clickedDescription = data.clickedDescription;\r\n\r\n    //console.log(areasCopy)\r\n\r\n    const userLayoutCopy = { ...userLayout, areas: areasCopy };\r\n\r\n    setUserLayout(userLayoutCopy);\r\n\r\n    resetHandler();\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    alert(JSON.stringify(data));\r\n  };\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <div className=\"mainButton\">\r\n        <button type=\"submit\" onClick={() => setAdminMode(!adminMode)}>\r\n          {adminMode ? \"Admin mode on\" : \"Admin mode Off\"}\r\n        </button>\r\n      </div>\r\n\r\n      {adminMode ? (\r\n        <div className=\"grid\">\r\n          <h2>Admin layout:</h2>\r\n          <div className=\"presenter\">\r\n            <ImageMapper\r\n              src={URL}\r\n              map={adminLayout}\r\n              width={500}\r\n              onImageClick={(evt) => makeDot(evt)}\r\n              onClick={(area, _, evt) => makeDot2(area, evt)}\r\n              onImageMouseMove={(evt) => moveOnImage(evt)}\r\n            />\r\n            <div className=\"message\">{moveMsg ? moveMsg : null}</div>\r\n          </div>\r\n          <div className=\"form\">\r\n            <div></div>\r\n            <form onSubmit={handleSubmit(addPolygonHandler)}>\r\n              <label>Name</label>\r\n              <input name=\"name\" ref={register}></input>\r\n              <label>Hover Description</label>\r\n              <input name=\"hoverDescription\" ref={register}></input>\r\n              <label>Clicked Desctiption</label>\r\n              <input name=\"clickedDescription\" ref={register}></input>\r\n              <div className=\"twoButtons\">\r\n                <div></div>\r\n                <button type=\"submit\">Add Polygon</button>\r\n                <button type=\"submit\" onClick={() => resetHandler()}>\r\n                  Reset\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n\r\n      <div className=\"grid\">\r\n        <h2>User layout:</h2>\r\n        <div className=\"presenter\">\r\n          <div style={{ position: \"relative\" }}>\r\n            <ImageMapper\r\n              src={URL}\r\n              map={userLayout}\r\n              width={500}\r\n              onImageClick={(evt) => clickedOutside(evt)}\r\n              onImageMouseMove={(evt) => moveOnImage(evt)}\r\n              onLoad={() => load()}\r\n              onMouseMove={(area, _, evt) => moveOnArea(area, evt)}\r\n              onClick={(area) => clicked(area)}\r\n              onMouseEnter={(area) => enterArea(area)}\r\n              onMouseLeave={(area) => leaveArea(area)}\r\n              lineWidth={2}\r\n              strokeColor={\"rgba(255, 255, 255, 0.1)\"}\r\n            />\r\n            <div className=\"message\">{moveMsg ? moveMsg : null}</div>\r\n            {hoveredArea && (\r\n              <span\r\n                className=\"tooltip\"\r\n                style={{ ...getTipPosition(hoveredArea) }}\r\n              >\r\n                {hoveredArea && hoveredArea.name}\r\n              </span>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"userMessage\">{msg ? msg : null}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default app;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}